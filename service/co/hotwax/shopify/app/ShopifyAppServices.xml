<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="register" noun="ShopifyShopApp">
        <description>
            Authorize app using OAuth
            https://shopify.dev/apps/auth/oauth/getting-started

            Using a Shopify Admin API library helps to keep app secure and reduce implementation time.
            Shopify recommends that you use a library where possible.
        </description>
        <in-parameters>
            <parameter name="clientId" required="true">
                <description>Shopify app clientId</description>
            </parameter>
            <parameter name="code" required="true"><description>Authorization code</description></parameter>
            <parameter name="shop" required="true"> <description>Shopify shop url</description></parameter>
        </in-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyApp" list="shopifyApps" cache="true">
                <econdition field-name="clientId" from="clientId"/>
            </entity-find>
            <set field="shopifyApp" from="shopifyApps?.first"/>
            <if condition="!shopifyApp">
                <return type="warning" message="Shop ${shop} trying to install invalid app ${clientId}" public="true"/>
            </if>

            <set field="appTypeEnum" from="shopifyApp?.appTypeEnum"/>
            <set field="appTypeId" from="shopifyApp.appTypeId"/>
            <log level="warn" message="Request received for ${shopifyApp.appName?:shopifyApp.appId} [${appTypeId}] installation for shop ${shop}"/>
            <entity-find entity-name="co.hotwax.shopify.shop.ShopifyShop" list="shopifyShops" cache="true">
                <econdition field-name="myshopifyDomain" from="shop"/>
            </entity-find>
            <if condition="shopifyShops">
                <set field="shopId" from="shopifyShops?.first.shopId"/>
             <else>
                <service-call name="create#co.hotwax.shopify.shop.ShopifyShop" in-map="[myshopifyDomain: shop]" out-map="context" transaction="force-new"/>
             </else>
            </if>
            <!-- TODO: Handle error properly, return error received from shopify-->
            <service-call name="co.hotwax.shopify.app.ShopifyAdminServices.get#ShopifyShopAccessToken" in-map="[shop: shop, code: code, clientId: clientId, clientSecret: shopifyApp.clientSecret]" ignore-error="true" out-map="context"/>
            <if condition="!accessToken">
                <return type="warning" message="Failed to get the oauth access token for shop ${shop}" error="true" public="true"/>
            </if>
            <!--Check for already installed app, if found expire them and create new record -->
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyShopApp" list="shopifyShopApps" cache="true">
                <date-filter/>
                <econdition field-name="shopId" from="shopId"/>
                <econdition field-name="appId" from="shopifyApp.appId"/>
            </entity-find>
            <set field="alreadyRegistered" value="false" type="Boolean"/>
            <if condition="shopifyShopApps">
                <iterate list="shopifyShopApps" entry="oldShopifyShopApp">
                    <if condition="accessToken.equals(oldShopifyShopApp.shopAccessToken)">
                        <set field="alreadyRegistered" value="true" type="Boolean"/>
                        <continue/>
                    </if>
                    <service-call name="update#co.hotwax.shopify.app.ShopifyShopApp"
                            in-map="oldShopifyShopApp + [thruDate:ec.user.nowTimestamp]" ignore-error="true"/>
                </iterate>
            </if>
            <if condition="!alreadyRegistered">
                <service-call name="create#co.hotwax.shopify.app.ShopifyShopApp" in-map="[shopId: shopId, appId: shopifyApp.appId, shopAccessToken: accessToken, fromDate:ec.user.nowTimestamp]"/>
                <service-call name="co.hotwax.shopify.app.ShopifyAppServices.store#ShopifyShop" in-map="context" disable-authz="true" />
                <log message="${appTypeEnum?.description} [${appTypeId}] installed successfully at shop ${shop}"/>
            <else>
                <log message="${appTypeEnum?.description} [${appTypeId}] duplicate installation request received for ${shop}"/>
            </else>
            </if>
        </actions>
    </service>
    <service verb="store" noun="ShopifyShop">
        <description>
            Get the shopify shop data and update existing shopifyShop
        </description>
        <in-parameters>
            <parameter name="shopId" required="true"/>
            <parameter name="shop" required="true"/>
            <parameter name="accessToken" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="co.hotwax.shopify.app.ShopifyAdminServices.get#ShopifyShop" in-map="context" out-map="result" />
            <if condition="result.shopifyShop">
                <service-call name="update#co.hotwax.shopify.shop.ShopifyShop" in-map="result.shopifyShop + ['shopId': shopId]"/>
             <else>
                 <log level="error" message="Unable to get shop data for shopId ${shopId}"/>
             </else>
            </if>
        </actions>
    </service>

    <!-- Shopify embedded app api -->
    <service verb="set" noun="HotwaxInstance">
        <description>
            Set the Hotwax instance address and token
        </description>
        <in-parameters>
            <parameter name="clientId" required="true"/>
            <parameter name="shop" required="true"/>
            <parameter name="instanceAddress" required="true"/>
            <parameter name="instanceToken" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyShopAndApp" list="shopApps">
                <econdition field-name="clientId" from="clientId"/>
                <econdition field-name="myshopifyDomain" from="shop"/>
                <date-filter/>
            </entity-find>
            <if condition="!shopApps">
                <return type="warning" error="true" message="Shop ${shop} not registered for app ${clientId}"/>
            </if>
            <set field="shopApp" from="shopApps?.first"/>
            <!-- TODO: Remove https and leading/trailing space -->
            <entity-find entity-name="co.hotwax.shopify.app.HotwaxInstance" list="hotwaxInstances" cache="true">
                <econdition field-name="hostAddress" from="instanceAddress"/>
            </entity-find>
            <if condition="hotwaxInstances">
                <set field="instanceId" from="hotwaxInstances?.first?.instanceId" />
            <else>
                <service-call name="create#co.hotwax.shopify.app.HotwaxInstance" in-map="[hostAddress: instanceAddress]" out-map="context"/>
            </else>
            </if>
            <service-call name="update#co.hotwax.shopify.app.ShopifyShopApp" in-map="[shopId: shopApp.shopId, appId: shopApp.appId, fromDate: shopApp.fromDate, hotwaxAccessToken: instanceToken, hotwaxInstanceId: instanceId]"/>
            <service-call name="co.hotwax.shopify.app.ShopifyAppServices.sync#HotwaxInstance" in-map="[shop: shopApp.myshopifyDomain, accessToken: shopApp.shopAccessToken, sharedSecret: shopApp.clientSecret, instanceAddress: instanceAddress, instanceToken: instanceToken ]" out-map="context" transaction="force-new"/>
        </actions>
    </service>
    <service verb="sync" noun="HotwaxInstance">
        <description>
            Sync the HotWax OMS instance with Shopify access token
        </description>
        <in-parameters>
            <parameter name="accessToken" required="true"/>
            <parameter name="sharedSecret" required="true"/>
            <parameter name="shop" required="true"/>
            <parameter name="instanceAddress" required="true"/>
            <parameter name="instanceToken" required="true"/>
        </in-parameters>
        <actions>
            <if condition="!instanceAddress.startsWith('https://')">
                <set field="instanceAddress" from="'https://' +  instanceAddress"/>
            </if>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.util.RestClient.Method

                RestClient restClient = ec.service.rest()
                restClient.method(Method.POST)

                shop = shop.replace(".myshopify.com", "")
                // TODO take dynamic values for productStoreId and webSiteId
                Map parameters = ["shop": shop , "shopifyConfigName": shop, "sharedSecret": sharedSecret, "accessToken": accessToken, "productStoreId": "STORE", "webSiteId": "WEBSTORE"]
                restClient.uri("${instanceAddress}/api/service/createUpdateShopifyShop")
                restClient.addHeader("Authorization", "Bearer " + instanceToken);
                restClient.addBodyParameters(parameters);
                try {
                    RestClient.RestResponse restResponse = restClient.call()
                    response = restResponse.jsonObject()
                    statusCode = restResponse.getStatusCode()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        ec.logger.error("Error connecting to OMS status code: ${statusCode} and response: ${response}")
                        error = response.get("error")
                        message = error != null && error.get("message") != null ? error.get("message").toString() : "Error connecting to OMS response ${error}";
                        ec.message.addError(message)
                        return
                    }
                } catch (Exception e) {
                    ec.logger.error("Error connecting to OMS API call Error: ${e.getMessage()}")
                    ec.message.addError("Error connecting to OMS API call Error: ${e.getMessage()}")
                    return
                }
            ]]></script>
        </actions>
    </service>
    <service verb="get" noun="HotwaxInstance">
        <description>
            Get the Hotwax instance address and token for already installed shopify app
        </description>
        <in-parameters>
            <parameter name="clientId" required="true"/>
            <parameter name="shop" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="instanceAddress"/>
            <parameter name="instanceToken"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyShopAndApp" list="shopApps">
                <econdition field-name="clientId" from="clientId"/>
                <econdition field-name="myshopifyDomain" from="shop"/>
                <date-filter/>
            </entity-find>

            <if condition="!shopApps">
                <return type="warning" error="true" message="Shop ${shop} not registered for app ${clientId}"/>
            </if>
            <set field="shopApp" from="shopApps?.first"/>
            <set field="instanceAddress" from="shopApp.hostAddress"/>
            <set field="instanceToken" from="shopApp.hotwaxAccessToken"/>
        </actions>
    </service>
    <!--Shopify embedded app api end-->

    <service verb="get" noun="ShopifyAppClientId">
        <description>
            Get the shopify api key for custom app installation.
        </description>
        <in-parameters>
            <parameter name="shop" required="true">
                <description>Shopify shop name</description>
            </parameter>
            <parameter name="appTypeId" required="true">
                <description>Shopify App type id to get the app API key</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="clientId" required="true"><description>Shopify app apiKey/clientId</description></parameter>
        </out-parameters>
        <actions>
            <!-- Check for custom app -->
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyApp" list="shopifyApps" cache="true">
                <econdition field-name="myshopifyDomain" from="shop"/>
                <econdition field-name="appTypeId" from="appTypeId"/>
            </entity-find>
            <if condition="!shopifyApps">
                <!-- If no custom app found then check for public app -->
                <entity-find entity-name="co.hotwax.shopify.app.ShopifyApp" list="shopifyApps" cache="true">
                    <econdition field-name="myshopifyDomain" from="null"/>
                    <econdition field-name="appTypeId" from="appTypeId"/>
                </entity-find>
            </if>
            <if condition="!shopifyApps?.first?.apiKey">
                <return message="No ${appTypeId} app configuration found for ${shop}" type="warning"/>
            </if>
            <set field="clientId" from="shopifyApps?.first?.clientId"/>
        </actions>
    </service>

    <service verb="verify" noun="AppInstallationRequest">
        <description>
            https://shopify.dev/docs/apps/auth/get-access-tokens/authorization-code-grant/getting-started#step-1-verify-the-installation-request
        </description>
        <in-parameters>
            <parameter name="clientId" required="true">
                <description>Shopify app clientId</description>
            </parameter>
            <parameter name="shop" required="true"> <description>Shopify shop url</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="requestAuthorizationCode"/>
        </out-parameters>
        <actions>
            <!--
                Perform following check to re/request accessToken
                - Your app doesn't have a token for that shop.
                - Your app uses online tokens and the token for that shop has expired.
                - Your app has a token for that shop, but it was created before you rotated the app's secret.
                - Your app has a token for that shop, but your app now requires scopes that differ from the scopes granted with that token.
            -->
            <!--TODO: Add status check while fetch shopify app -->
            <entity-find entity-name="co.hotwax.shopify.app.ShopifyApp" list="shopifyApps" cache="true">
                <econdition field-name="clientId" from="clientId"/>
            </entity-find>
            <set field="shopifyApp" from="shopifyApps?.first"/>
            <if condition="!shopifyApp">
                <return type="warning" message="Shop ${shop} trying to install invalid app ${clientId}" public="true"/>
            </if>
            <set field="requestAuthorizationCode" value="true"/>
        </actions>
    </service>
</services>